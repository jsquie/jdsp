mod os_filter_constants;
mod oversample_stage;

use nih_plug::prelude::*;

use self::oversample_stage::OversampleStage;

use self::os_filter_constants::{
    FILTER_EVEN_TAPS_OS16X, FILTER_EVEN_TAPS_OS2X, FILTER_EVEN_TAPS_OS4X, FILTER_EVEN_TAPS_OS8X,
};

const MAX_OVER_SAMPLE_FACTOR: usize = 4;

#[derive(Enum, Debug, Copy, Clone, PartialEq)]
pub enum OversampleFactor {
    #[id = "2x"]
    #[name = "2x"]
    TwoTimes = 1,
    #[id = "4x"]
    #[name = "4x"]
    FourTimes = 2,
    #[id = "8x"]
    #[name = "8x"]
    EightTimes = 3,
    #[id = "16x"]
    #[name = "16x"]
    SixteenTimes = 4,
}

#[derive(Debug)]
pub struct Oversample {
    // buff_size: usize,
    factor: OversampleFactor,
    stages: [OversampleStage; MAX_OVER_SAMPLE_FACTOR],
}

/*
fn target_buf_len_from_factor(initial_buff_size: usize, factor: usize) -> usize {
    assert!(factor > 0 && factor <= MAX_OVER_SAMPLE_FACTOR);
    initial_buff_size * (2_u8.pow(factor as u32) as usize)
}
*/
impl Oversample {
    pub fn new(initial_factor: OversampleFactor, init_buff_size: usize) -> Self {
        Oversample {
            factor: initial_factor,
            stages: [
                OversampleStage::new(init_buff_size, FILTER_EVEN_TAPS_OS2X),
                OversampleStage::new(init_buff_size * 2, FILTER_EVEN_TAPS_OS4X),
                OversampleStage::new(init_buff_size * 4, FILTER_EVEN_TAPS_OS8X),
                OversampleStage::new(init_buff_size * 8, FILTER_EVEN_TAPS_OS16X),
            ],
        }
    }

    pub fn get_oversample_factor(&self) -> OversampleFactor {
        self.factor
    }

    pub fn set_oversample_factor(&mut self, new_factor: OversampleFactor) {
        self.factor = new_factor;
    }

    #[cold]
    pub fn reset(&mut self) {
        // self.up_stages
        // .iter_mut()
        // .zip(self.down_stages.iter_mut())
        // .for_each(|(u, d)| {
        // u.reset();
        // d.reset();
        // });
    }

    pub fn process_up(&mut self, input: &[f32], output: &mut [f32]) {
        let mut processed = input;
        self.stages
            .iter_mut()
            .take(self.factor as usize)
            .for_each(|st| {
                st.process_up(processed);
                // dbg!(&st);
                processed = &st.data;
            });

        output
            .iter_mut()
            .zip(processed.iter())
            .for_each(|(o, i)| *o = *i);
    }

    #[inline]
    pub fn process_down(&mut self, input: &[f32], output: &mut [f32]) {
        let mut last_stage = input;

        self.stages
            .iter_mut()
            .take(self.factor as usize)
            .rev()
            .for_each(|st| {
                st.process_down(last_stage);
                dbg!(&st);
                last_stage = &st.data;
            });

        output
            .iter_mut()
            .zip(last_stage.iter())
            .for_each(|(out, st)| {
                *out = *st;
            })
    }
}

#[cfg(test)]
mod tests {

    use crate::oversample::*;

    #[test]
    fn test_create_os_2x() {
        let os = Oversample::new(OversampleFactor::TwoTimes, 4);
        assert_eq!(os.stages.len(), 4);
    }
    const ERR_TOL: f32 = 1e-5;

    fn check_results(result: &[f32], expected: &[f32]) {
        result
            .iter()
            .zip(expected.iter())
            .enumerate()
            .for_each(|(idx, (a, b))| {
                assert!(
                    (a - b).abs() < ERR_TOL,
                    "Wrong at index: {} -- result: {} expected: {}",
                    idx,
                    a,
                    b
                );
            })
    }

    #[test]
    fn test_small_2x() {
        let mut os = Oversample::new(OversampleFactor::TwoTimes, 8);

        let mut sig = [1.0_f32; 8];
        let mut up_result = [0.0_f32; 16];

        os.process_up(&sig, &mut up_result);
        os.process_down(&up_result, &mut sig);

        let expected_result: &[f32] = &[
            0.00000000e+00,
            2.65547319e-46,
            2.29361232e-16,
            -4.03888678e-15,
            3.47060855e-14,
            -2.00697934e-13,
            8.97577897e-13,
            -3.34335434e-12,
        ];

        check_results(&sig, expected_result);
    }

    #[test]
    fn test_2x_2_partitions() {
        let mut os = Oversample::new(OversampleFactor::TwoTimes, 8);

        let mut sig_1: Vec<f32> = (0..8).map(|v| v as f32).collect();
        let mut sig_2: Vec<f32> = (8..16).map(|v| v as f32).collect();

        let mut up_result_1 = [0.0_f32; 16];

        os.process_up(&sig_1, &mut up_result_1);
        os.process_down(&up_result_1, &mut sig_1);
        os.process_up(&sig_2, &mut up_result_1);
        os.process_down(&up_result_1, &mut sig_2);

        let expected_result = [
            0.00000000e+00,
            0.00000000e+00,
            5.31094638e-46,
            4.58722465e-16,
            -7.61905109e-15,
            6.17931199e-14,
            -3.39602747e-13,
            1.45555305e-12,
            -5.23115563e-12,
            1.64637463e-11,
            -4.66735607e-11,
            1.21538388e-10,
            -2.94855771e-10,
            6.73573634e-10,
            -1.46088856e-09,
            3.02788012e-09,
        ];

        check_results(
            &sig_1
                .into_iter()
                .chain(sig_2.into_iter())
                .collect::<Vec<f32>>(),
            &expected_result,
        )
    }

    #[test]
    fn test_up_down_sample_4x() {
        let mut os = Oversample::new(OversampleFactor::FourTimes, RAND_DATA_LEN);
        let mut sig = [0.0_f32; RAND_DATA_LEN];
        sig.copy_from_slice(&RAND_DATA);

        let mut up_result = [0.0_f32; RAND_DATA_LEN * 4];

        const E_RESULT: [f32; RAND_DATA_LEN] = [
            0.00000000e+00,
            0.00000000e+00,
            1.71383099e-60,
            1.48028754e-30,
            3.11112036e-28,
            6.28227351e-27,
            2.38972786e-26,
            2.35839778e-27,
            -1.75966129e-25,
            -1.10964359e-24,
            -2.82085016e-24,
            -5.78242234e-24,
            -1.93782779e-24,
            2.29724458e-23,
            1.54938611e-22,
            3.56779672e-22,
            -3.76642407e-21,
            2.82765747e-20,
            -8.11957141e-20,
            2.95079154e-19,
            -7.34366279e-19,
            1.91618694e-18,
            -4.32438071e-18,
            9.46560000e-18,
            -1.93434874e-17,
            3.78535244e-17,
            -7.05455099e-17,
            1.26346915e-16,
            -2.16624304e-16,
            3.57714387e-16,
            -5.65939872e-16,
            8.59663708e-16,
            -1.24466058e-15,
            1.70787822e-15,
            -2.18394424e-15,
            2.52174146e-15,
            -2.41342284e-15,
            1.30054308e-15,
            1.77121652e-15,
            -8.35737069e-15,
            2.08945601e-14,
            -4.30832960e-14,
            8.03627779e-14,
            -1.40458955e-13,
            2.33784627e-13,
            -3.73605436e-13,
            5.76349692e-13,
            -8.60556701e-13,
            1.24374416e-12,
            -1.73771889e-12,
            2.34046418e-12,
            -3.02346725e-12,
            3.71470297e-12,
            -4.27502749e-12,
            4.46903068e-12,
            -3.92877755e-12,
            1.96253395e-08,
            -1.55957519e-07,
            5.68422166e-07,
            -1.58563341e-06,
            3.95442136e-06,
            -9.04926709e-06,
            1.92643302e-05,
            -3.86265019e-05,
            7.34340601e-05,
            -1.33246093e-04,
            2.31871967e-04,
            -3.88631015e-04,
            6.29620269e-04,
            -9.89213129e-04,
            1.51159014e-03,
            -2.25210402e-03,
            3.27865130e-03,
            -4.67300491e-03,
            6.53238981e-03,
            -8.97150608e-03,
            1.21258023e-02,
            -1.61571667e-02,
            2.12643966e-02,
            -2.77033551e-02,
            3.58270775e-02,
            -4.61695988e-02,
            5.96392909e-02,
            -7.80387241e-02,
            1.05852844e-01,
            -1.59716880e-01,
            4.07591654e-01,
            7.03074324e-01,
            9.50649272e-01,
            -1.00919521e+00,
            -1.39200054e+00,
            -2.62642930e-01,
            8.62015795e-01,
            1.86231300e+00,
            1.34469184e+00,
            2.07272361e+00,
            7.76517123e-01,
            1.28007090e+00,
            8.30210835e-01,
            5.98293227e-01,
            -2.30600725e+00,
            -4.13515137e-01,
            1.48001595e-01,
            -1.41556592e+00,
            -4.93460982e-01,
            -9.93517820e-01,
            -1.28905864e+00,
            -9.35231710e-01,
            1.04500194e+00,
            -7.06706264e-01,
            9.04408297e-01,
            -2.49729076e-01,
            1.19430967e+00,
            -3.79335060e-01,
            -1.57307237e+00,
            -5.59385934e-01,
            8.34386965e-01,
            -4.86939824e-02,
            -1.78494058e+00,
            -8.57387125e-01,
            -8.53358152e-01,
            5.97632657e-01,
            4.24670491e-02,
            -1.48728095e+00,
            -1.56714640e+00,
            -2.04237722e-01,
            -2.20103186e-01,
            -7.22430866e-01,
            -3.70485462e-01,
            1.80182477e+00,
            8.42100895e-01,
            8.45831062e-01,
            3.53933930e-01,
            -1.84736544e-01,
            -6.08709043e-01,
            7.91215754e-02,
            -1.82051383e-01,
            -1.39544819e+00,
            1.97939255e-01,
            2.14007464e-01,
            -1.58873057e-01,
            -1.59586471e+00,
            9.16043362e-01,
            -2.70067623e+00,
            -1.71767712e+00,
            1.90858567e+00,
            -1.06655134e-01,
            -7.27208181e-02,
            -1.13428691e+00,
            -8.03087739e-01,
            -2.87228592e-01,
            9.13539497e-01,
            -6.25370848e-02,
            1.16316260e+00,
            1.74862746e+00,
            -9.69906045e-01,
            1.16230410e+00,
            -6.55225184e-02,
            -1.65301713e+00,
            -1.31635056e-01,
            -5.50394494e-01,
            -1.01316171e+00,
            -1.68982242e-01,
            -2.99753737e-04,
            -5.27588330e-01,
            -1.28416055e+00,
            -4.20023779e-01,
            2.61791822e+00,
            1.32512418e-01,
            -2.14605468e-01,
            -3.34766187e-01,
            -6.01871737e-02,
            1.33639968e+00,
            9.06636991e-01,
            2.41827570e+00,
            -3.76436270e-01,
            -2.47541235e+00,
            -3.72216620e-01,
            -2.70442601e-01,
            1.30468469e+00,
            -4.16650970e-01,
            1.15848988e+00,
            -3.86716509e-01,
            -9.21519034e-01,
            5.20358474e-01,
            -2.11736786e-02,
            1.53360387e+00,
            9.32001624e-02,
            -3.22604020e-01,
            -9.49925157e-01,
            9.28047276e-01,
            -1.01697809e-01,
            -1.48751570e+00,
            2.03834574e+00,
            1.35281259e+00,
            -8.38357015e-01,
            7.07909900e-02,
            -2.88804854e-01,
            9.74051848e-01,
            1.23959543e+00,
            -9.36932503e-01,
            -5.29915932e-02,
            4.04218453e-01,
            5.98978423e-01,
            -1.07847368e+00,
            3.57038471e-02,
            1.45269291e+00,
            -1.15783418e-01,
            -1.08520614e+00,
            -1.18388453e-01,
            -8.14648977e-02,
            2.20548590e-01,
            -1.76185131e-01,
            -8.48238735e-01,
            3.05192967e-01,
            8.84395677e-01,
            6.62812589e-01,
            3.71180978e-01,
            4.55285259e-02,
            7.45026074e-01,
            -1.17502745e-01,
            1.48222354e+00,
            6.15359601e-01,
            -4.71903278e-01,
            1.16504163e+00,
            -3.68802573e-01,
            -8.02851686e-01,
            -1.33667136e-01,
            -5.91550315e-01,
            1.23098946e-01,
            -2.64362949e-01,
            -1.50903278e-01,
            -1.22658263e-01,
            -2.38215119e+00,
            -4.32657283e-02,
            2.58803408e-01,
            2.35386234e-01,
            6.90802125e-01,
            3.39245757e-01,
            2.10804961e+00,
            4.96853080e-01,
            -9.88053985e-01,
            9.01684275e-01,
            -1.53856550e+00,
            3.21231460e-01,
            -7.01901560e-01,
            -2.23634075e-01,
            8.55458580e-01,
            -2.40087992e+00,
            5.18712909e-01,
            -9.81614316e-01,
            9.48652010e-01,
            5.06250438e-01,
            4.70785752e-01,
            -2.20012759e-01,
            -1.28283364e+00,
            -3.34713640e-01,
            5.12615813e-01,
            4.42411200e-01,
            -1.02276825e+00,
            -2.72929911e-01,
            -1.30159396e+00,
            -4.18758894e-01,
            1.08759058e+00,
            7.52927857e-01,
            7.60530406e-01,
            -3.47193914e-01,
            -1.01668371e+00,
            2.23028294e-01,
            -1.31985509e+00,
            -1.13261145e+00,
            -4.21767959e-01,
            -6.44820018e-01,
            -1.95348321e+00,
            -1.63178632e+00,
            -1.66324531e+00,
            -5.21701888e-01,
            -1.33974851e+00,
            -1.10241485e+00,
            9.16037528e-01,
            -7.10439746e-01,
            -1.36557781e+00,
            -1.10729835e+00,
            -9.33150452e-01,
            6.68884979e-01,
            1.60620026e+00,
            1.12073621e+00,
            -4.12796634e-01,
            1.86916705e-02,
            1.31729528e+00,
            1.43806095e+00,
            8.68024441e-01,
            -7.80286119e-01,
            6.07241749e-01,
            1.70650717e+00,
            -8.56883377e-01,
            -1.89511732e-01,
            5.80701487e-01,
            1.72358588e+00,
            -6.66939497e-01,
            -7.17583073e-01,
            3.05780681e-01,
            -4.72864504e-01,
            8.25829078e-01,
            -6.82443999e-01,
            3.98121621e-01,
            1.48338754e+00,
            -9.78785274e-01,
            1.61953108e-01,
            -5.12208103e-01,
            -7.22089214e-01,
            8.18766057e-01,
            -1.59580019e+00,
            -1.63067709e-01,
            2.32530910e-01,
            1.03578850e+00,
            -1.00767468e+00,
            -4.38419738e-01,
            -4.15383608e-01,
            -2.68435294e-01,
            -1.87516666e+00,
            -9.42661640e-01,
            1.51555814e+00,
            2.98555565e-01,
            -5.27641750e-01,
            1.16219210e-01,
            2.58381088e-01,
            -8.31288109e-01,
            -1.17771212e-01,
            -1.15996363e+00,
            9.14726474e-01,
            -1.14128395e+00,
            -1.35621917e+00,
            -4.39978999e-01,
            -4.80794176e-01,
            -2.17837788e+00,
            -1.01562769e+00,
            -8.03744065e-01,
            7.92045379e-02,
            4.72019496e-01,
            -9.83209415e-01,
            3.42000296e-01,
            -1.30898784e+00,
            4.05475698e-01,
            2.22489791e+00,
            6.03417879e-01,
            6.15550852e-01,
            -1.70608431e+00,
            1.22196875e+00,
            4.53718339e-01,
            -1.86720973e+00,
            -4.89290709e-01,
            7.92832067e-01,
            1.44731570e+00,
            -2.02351351e+00,
            -1.15497974e+00,
            -1.35007046e+00,
            -3.50467600e-01,
            1.51410757e+00,
            1.19175866e+00,
            -3.16170265e-01,
            1.63153016e-01,
            5.32790650e-01,
            1.79264220e-01,
            5.12418796e-02,
            3.87604220e-01,
            -1.11294290e-01,
            -9.73017368e-01,
            7.02337929e-01,
            -1.46086463e+00,
            -5.03518607e-01,
            -3.51633000e-01,
            -2.76556233e-01,
            1.00204716e+00,
            -5.39883521e-02,
            -1.26914157e+00,
            -5.25728462e-01,
            -7.27031387e-01,
            -7.04335487e-01,
            2.57791384e-01,
            -6.48160356e-01,
            -6.79999877e-01,
            5.84326068e-01,
            5.45715336e-01,
            -1.21277650e+00,
            -8.95300853e-01,
            1.51816847e-01,
            -1.78371045e-01,
            6.87038344e-01,
            1.61446699e-01,
            -1.16089624e+00,
            -6.15779400e-02,
            -3.90727250e-02,
            -1.99599143e+00,
            -1.18292139e+00,
            1.50664045e+00,
            -7.97727943e-01,
            -2.06835566e+00,
            8.38890450e-01,
            1.91443630e+00,
            -1.21956048e+00,
            7.19847248e-01,
            8.57799737e-01,
            3.66024350e-03,
            -6.56811289e-01,
            -3.49876082e-03,
            -4.30428546e-01,
            -9.69892098e-01,
            -7.77328798e-01,
            1.11544021e+00,
            -1.47637215e-01,
            4.89752136e-01,
            -3.25156740e-01,
            -2.44220569e+00,
            1.43592688e+00,
            -8.58613643e-02,
            -8.52168099e-01,
            6.15603355e-01,
            1.33003691e+00,
            -8.33380930e-01,
            3.34583205e-01,
            5.69159252e-01,
            1.17653497e+00,
            -1.72224883e-01,
            4.48967610e-01,
            -1.19731740e+00,
            -1.44323479e+00,
            1.02111102e+00,
            -2.16367256e-01,
            1.68720433e-01,
            -6.09182479e-01,
            -2.16805405e-01,
            -1.97009720e-01,
            -7.82591003e-01,
            7.85392884e-01,
            9.73229737e-01,
            3.83272038e-01,
            -3.66932263e-01,
            2.23324612e+00,
            1.16188493e+00,
            -7.06405599e-01,
            1.13350672e-01,
            -1.21358660e+00,
            -8.36892631e-02,
            -2.09976940e-01,
            1.57755876e+00,
            -9.94096909e-01,
            -1.17859490e+00,
            -3.07069078e-01,
            -2.20319983e+00,
            -5.07242460e-01,
            -2.94676521e+00,
            -2.07490790e-01,
            -4.92296187e-01,
            -1.34858914e+00,
            1.44128156e+00,
            1.32190624e+00,
            1.00388313e+00,
            2.69379505e-01,
            2.22121037e-02,
            2.01428951e-01,
            4.79739284e-01,
            1.37707021e+00,
            1.59141219e+00,
            -7.15641264e-01,
            8.27236814e-01,
            -8.30945943e-02,
            9.65879935e-01,
            3.92148788e-01,
            -5.81681400e-01,
            5.38241668e-01,
            -1.18416465e+00,
            -1.23827908e+00,
            1.82533979e+00,
            5.65204307e-03,
            3.27085979e-01,
            1.48179200e+00,
            -2.96674515e-01,
            -6.90169846e-01,
            -1.08195942e+00,
        ];

        os.process_up(&sig, &mut up_result);
        os.process_down(&up_result, &mut sig);

        check_results(&sig, &E_RESULT);
    }

    #[test]
    fn test_small_up_sample_8x() {
        let mut os = Oversample::new(OversampleFactor::EightTimes, 480);
        let mut sig = [0.0_f32; RAND_DATA_LEN];
        sig.copy_from_slice(&RAND_DATA);

        let mut up_result = [0.0_f32; RAND_DATA_LEN * 8];

        const E_RESULT: [f32; RAND_DATA_LEN] = [
            0.00000000e+000,
            0.00000000e+000,
            2.15500543e-103,
            5.84338221e-058,
            9.33800614e-041,
            8.69747084e-039,
            -4.09478846e-037,
            6.73781348e-036,
            -3.67528138e-034,
            -1.92140903e-033,
            5.08434086e-032,
            -1.53417600e-031,
            5.26979780e-031,
            -2.28185353e-030,
            3.95640027e-030,
            -1.53742259e-029,
            3.06234238e-029,
            -6.36992181e-029,
            1.87859399e-028,
            -2.86192443e-028,
            1.38442892e-027,
            -6.59589973e-028,
            2.96665875e-023,
            1.09243881e-021,
            -8.10469847e-021,
            2.13564459e-020,
            -5.31828025e-020,
            1.10346511e-019,
            -9.71797596e-020,
            -2.59625129e-020,
            1.09645742e-018,
            -3.95461841e-018,
            1.39791922e-017,
            4.96177962e-017,
            -1.86133160e-015,
            1.84530276e-014,
            -1.13012775e-013,
            5.20330505e-013,
            -1.97940983e-012,
            6.56124319e-012,
            -1.95784022e-011,
            5.37239033e-011,
            -1.37573955e-010,
            3.32256393e-010,
            -7.62793496e-010,
            1.67487174e-009,
            -3.53423488e-009,
            7.19540236e-009,
            -1.41800730e-008,
            2.71247230e-008,
            -5.04831625e-008,
            9.16050924e-008,
            -1.62358255e-007,
            2.81522270e-007,
            -4.78259935e-007,
            7.97070685e-007,
            -1.30475674e-006,
            2.10009320e-006,
            -3.32710261e-006,
            5.19311592e-006,
            -7.99320289e-006,
            1.21431888e-005,
            -1.82246864e-005,
            2.70494362e-005,
            -3.97283939e-005,
            5.77121073e-005,
            -8.29496840e-005,
            1.18000293e-004,
            -1.66017169e-004,
            2.30805948e-004,
            -3.16767512e-004,
            4.28612005e-004,
            -5.71047664e-004,
            7.48070878e-004,
            -9.62161067e-004,
            1.21308715e-003,
            -1.49654651e-003,
            1.80237460e-003,
            -2.11242033e-003,
            2.39832074e-003,
            -2.61905596e-003,
            2.71839155e-003,
            -2.62202685e-003,
            2.23441475e-003,
            -1.43470875e-003,
            7.10208049e-005,
            2.04876455e-003,
            -5.17361954e-003,
            9.64230662e-003,
            -1.59537756e-002,
            2.49363359e-002,
            -3.82308438e-002,
            6.01084102e-002,
            -1.08823476e-001,
            5.43789380e-001,
            7.90670999e-001,
            7.07962446e-001,
            -1.50587912e+000,
            -1.00057504e+000,
            -1.48826094e-001,
            1.36372871e+000,
            1.63043754e+000,
            1.60119125e+000,
            1.80978621e+000,
            7.58791832e-001,
            1.27476768e+000,
            8.18741885e-001,
            4.13680532e-002,
            -2.51616728e+000,
            4.10002526e-001,
            -5.70621376e-001,
            -1.10907931e+000,
            -6.37890038e-001,
            -9.50416264e-001,
            -1.54331821e+000,
            -1.91537467e-001,
            6.69609333e-001,
            -5.31088095e-001,
            9.19537256e-001,
            -2.79270672e-001,
            1.41579523e+000,
            -1.18017226e+000,
            -1.22707952e+000,
            -3.80182411e-001,
            1.12930911e+000,
            -8.51550844e-001,
            -1.50210642e+000,
            -9.43063066e-001,
            -4.88951899e-001,
            6.61878620e-001,
            -3.01952342e-001,
            -1.78814179e+000,
            -1.16321046e+000,
            -1.35880371e-001,
            -2.61592038e-001,
            -9.12835774e-001,
            2.54865678e-001,
            1.80250687e+000,
            6.45741651e-001,
            8.92797591e-001,
            1.16143755e-001,
            -2.43665409e-001,
            -6.33918649e-001,
            3.44293768e-001,
            -7.15946609e-001,
            -1.06941150e+000,
            3.27200730e-001,
            2.42169199e-001,
            -6.62131224e-001,
            -1.14620768e+000,
            7.68933278e-001,
            -3.61743668e+000,
            -1.69700971e-001,
            1.45905198e+000,
            -1.57650951e-001,
            -3.19313806e-001,
            -1.14919447e+000,
            -7.36242604e-001,
            6.65632674e-002,
            8.35400433e-001,
            -1.41797814e-001,
            1.76877447e+000,
            1.00525143e+000,
            -8.56913848e-001,
            1.52736617e+000,
            -9.46007595e-001,
            -1.23178035e+000,
            -1.10911335e-001,
            -7.04287475e-001,
            -9.67655604e-001,
            1.07473511e-001,
            -2.37543649e-001,
            -5.52163219e-001,
            -1.55037365e+000,
            5.94671110e-001,
            2.37096301e+000,
            -3.64018750e-001,
            -3.01242644e-002,
            -5.30599332e-001,
            4.20110925e-001,
            1.25202360e+000,
            1.15514505e+000,
            2.36432734e+000,
            -1.54718611e+000,
            -1.89242383e+000,
            -3.60388809e-001,
            1.75035930e-001,
            1.06756046e+000,
            -4.16115096e-001,
            1.39047025e+000,
            -1.14256730e+000,
            -2.48526263e-001,
            2.22111711e-001,
            4.18917851e-001,
            1.37425045e+000,
            -1.50042243e-001,
            -4.80708395e-001,
            -7.30143115e-001,
            1.23711674e+000,
            -9.22134640e-001,
            -7.75851971e-001,
            2.47906602e+000,
            5.52575876e-001,
            -7.51506535e-001,
            1.42721531e-001,
            -2.80584603e-001,
            1.46920909e+000,
            5.96401293e-001,
            -9.30587056e-001,
            1.59231186e-001,
            5.18297476e-001,
            3.00437014e-001,
            -1.23207036e+000,
            6.85636001e-001,
            1.21697419e+000,
            -5.37782008e-001,
            -9.55149523e-001,
            5.07659926e-002,
            -1.33697016e-001,
            3.31141450e-001,
            -5.11581079e-001,
            -6.42621156e-001,
            5.59223263e-001,
            8.63424778e-001,
            6.08318131e-001,
            2.26181326e-001,
            2.07894607e-001,
            6.40278165e-001,
            -4.12603606e-002,
            1.82641919e+000,
            -1.20300526e-001,
            6.09958231e-002,
            9.79864323e-001,
            -6.98722987e-001,
            -6.27033514e-001,
            -1.46582485e-001,
            -6.09867828e-001,
            3.19375853e-001,
            -5.69222537e-001,
            2.53940324e-001,
            -8.73163098e-001,
            -2.10281700e+000,
            4.00330741e-001,
            6.60904311e-002,
            4.64647681e-001,
            5.41674996e-001,
            6.29857568e-001,
            2.27085689e+000,
            -4.11643558e-001,
            -3.57208381e-001,
            4.83821172e-001,
            -1.57313650e+000,
            7.08439065e-001,
            -1.30695524e+000,
            7.26233847e-001,
            -2.20653565e-001,
            -1.93036616e+000,
            5.78908761e-001,
            -1.04266160e+000,
            1.43563516e+000,
            5.01148600e-002,
            7.63218199e-001,
            -8.73743266e-001,
            -9.41335570e-001,
            -2.93363389e-001,
            8.70813161e-001,
            -1.46028867e-001,
            -8.09882959e-001,
            -4.59409263e-001,
            -1.32463233e+000,
            3.46792510e-002,
            1.18551002e+000,
            6.05860086e-001,
            7.76776558e-001,
            -8.84462926e-001,
            -5.53378985e-001,
            -5.05858293e-002,
            -1.48285419e+000,
            -9.39056417e-001,
            -3.00115387e-001,
            -1.02484624e+000,
            -1.97037689e+000,
            -1.62321168e+000,
            -1.46836411e+000,
            -4.36790429e-001,
            -1.67016287e+000,
            -4.51609564e-001,
            8.00848981e-001,
            -1.15640380e+000,
            -1.21863475e+000,
            -1.17853320e+000,
            -6.01032873e-001,
            1.01820031e+000,
            1.64432324e+000,
            7.34481815e-001,
            -5.62012416e-001,
            4.11637048e-001,
            1.43329132e+000,
            1.38996971e+000,
            4.79643159e-001,
            -8.66874929e-001,
            1.32380495e+000,
            1.09459224e+000,
            -9.99307025e-001,
            7.57016615e-002,
            8.83998459e-001,
            1.51672162e+000,
            -1.26564805e+000,
            -1.11440355e-001,
            -6.00857926e-002,
            -1.17456153e-001,
            6.52962241e-001,
            -8.52440764e-001,
            1.05125068e+000,
            9.41458515e-001,
            -1.10603178e+000,
            4.95947087e-001,
            -1.08999310e+000,
            1.95394983e-002,
            2.32286976e-001,
            -1.53974377e+000,
            1.00198916e-001,
            4.31255333e-001,
            7.72794918e-001,
            -1.28426055e+000,
            -1.34190808e-001,
            -5.59003344e-001,
            -3.25870730e-001,
            -2.29619478e+000,
            5.55313152e-002,
            1.30383223e+000,
            8.70175653e-002,
            -6.43788894e-001,
            5.22181873e-001,
            -2.71370131e-001,
            -5.01702283e-001,
            -5.03109048e-001,
            -7.17598754e-001,
            8.18431973e-001,
            -1.63275616e+000,
            -1.01834393e+000,
            -3.46750125e-001,
            -8.34276511e-001,
            -2.24940429e+000,
            -6.29474184e-001,
            -9.34720656e-001,
            6.06130973e-001,
            -1.11576337e-001,
            -6.68193937e-001,
            1.63037245e-001,
            -1.44872169e+000,
            1.32277114e+000,
            1.80762241e+000,
            6.21980818e-001,
            1.01484357e-001,
            -1.56547421e+000,
            1.91839218e+000,
            -6.48389848e-001,
            -1.49637472e+000,
            -3.67686205e-001,
            1.41661883e+000,
            5.81237113e-001,
            -2.18281743e+000,
            -9.49258663e-001,
            -1.41484523e+000,
            2.38595474e-001,
            1.65398746e+000,
            7.98988632e-001,
            -4.23038989e-001,
            4.19775370e-001,
            4.06273557e-001,
            1.70152157e-001,
            2.89853768e-002,
            5.18797666e-001,
            -5.96248371e-001,
            -5.08823569e-001,
            4.48363954e-001,
            -1.71458801e+000,
            -5.22764699e-002,
            -6.67792618e-001,
            2.14265253e-001,
            8.75615838e-001,
            -4.17197715e-001,
            -1.29527017e+000,
            -3.04003880e-001,
            -9.97438895e-001,
            -3.02342639e-001,
            8.55995870e-002,
            -7.70942924e-001,
            -4.79534019e-001,
            8.81228375e-001,
            6.38667568e-002,
            -1.34694178e+000,
            -5.85213405e-001,
            1.79373525e-001,
            -1.64460286e-001,
            9.19075631e-001,
            -3.99201048e-001,
            -9.67167762e-001,
            1.12315998e-001,
            -3.74362812e-001,
            -2.34763263e+000,
            -2.31983134e-001,
            1.28366477e+000,
            -1.45318374e+000,
            -1.70756607e+000,
            1.72904824e+000,
            1.06153852e+000,
            -1.15896581e+000,
            1.16608140e+000,
            5.48797290e-001,
            -1.55526600e-001,
            -6.36341373e-001,
            1.02897043e-001,
            -6.77614562e-001,
            -9.98421352e-001,
            -3.99856363e-001,
            1.22092310e+000,
            -5.20259295e-001,
            9.83638320e-001,
            -1.44870721e+000,
            -1.54530855e+000,
            1.58308997e+000,
            -6.20169073e-001,
            -6.14257899e-001,
            1.09158589e+000,
            8.16462397e-001,
            -8.53271285e-001,
            6.04091703e-001,
            6.33934172e-001,
            1.07195557e+000,
            -3.57974053e-001,
            5.65528729e-001,
            -1.92891482e+000,
            -5.38340349e-001,
            8.00721906e-001,
            -2.19365551e-001,
            8.76881002e-002,
            -6.98094974e-001,
            -2.27266320e-002,
            -4.63720906e-001,
            -5.22391704e-001,
            1.05865041e+000,
            8.29118772e-001,
            1.29649483e-001,
            -4.11664579e-002,
            2.69385736e+000,
            1.86861479e-001,
            -3.06915525e-001,
            -3.03998790e-001,
            -9.98159566e-001,
            -1.02589735e-001,
            1.67907175e-001,
            1.45341494e+000,
            -1.72182412e+000,
            -4.85251627e-001,
            -1.00017454e+000,
            -1.80028458e+000,
            -8.50050508e-001,
            -2.94700805e+000,
            5.61173758e-001,
            -1.33639812e+000,
            -5.11814736e-001,
            1.53837369e+000,
            1.31395953e+000,
            7.55169714e-001,
            2.39768080e-001,
            -6.95109932e-002,
            3.96126275e-001,
            4.55644469e-001,
            1.85557515e+000,
            8.46905183e-001,
            -5.03889095e-001,
            8.51152006e-001,
            -1.39573175e-001,
            1.24274819e+000,
            -1.51258256e-001,
            -2.64480862e-001,
            3.92540041e-001,
            -1.68044360e+000,
        ];

        os.process_up(&sig, &mut up_result);
        os.process_down(&up_result, &mut sig);

        check_results(&sig, &E_RESULT);
    }

    const RAND_DATA_LEN: usize = 480;

    const RAND_DATA: [f32; RAND_DATA_LEN] = [
        6.47858931e-01,
        8.79115143e-01,
        2.71207952e-01,
        -1.76455276e+00,
        -6.24372399e-01,
        3.21807796e-02,
        1.76599367e+00,
        1.37660030e+00,
        1.90479855e+00,
        1.41047671e+00,
        9.08135980e-01,
        1.14939766e+00,
        8.51996501e-01,
        -7.52768862e-01,
        -2.19615196e+00,
        8.30110802e-01,
        -1.19411370e+00,
        -7.39969188e-01,
        -8.40580446e-01,
        -9.44326847e-01,
        -1.63820121e+00,
        5.20527840e-01,
        9.91773326e-02,
        -7.96016653e-02,
        6.42534628e-01,
        9.47597708e-03,
        1.23993523e+00,
        -1.75454615e+00,
        -8.22632198e-01,
        -1.63610024e-01,
        1.19202265e+00,
        -1.60052141e+00,
        -1.05176466e+00,
        -1.15484661e+00,
        5.62627902e-02,
        4.57988839e-01,
        -5.89324258e-01,
        -2.01609101e+00,
        -6.53286608e-01,
        -2.32743791e-01,
        -2.70481179e-01,
        -1.04419572e+00,
        1.00391644e+00,
        1.48600866e+00,
        6.86152368e-01,
        7.49713620e-01,
        1.06198049e-02,
        -4.09145246e-01,
        -4.49863351e-01,
        3.56199005e-01,
        -1.12363927e+00,
        -6.61642458e-01,
        3.83764514e-01,
        1.80199258e-01,
        -1.13045250e+00,
        -4.55720605e-01,
        3.44902106e-02,
        -3.85943491e+00,
        1.22927666e+00,
        6.90627995e-01,
        4.46458057e-02,
        -7.65927467e-01,
        -9.36593603e-01,
        -7.82251590e-01,
        5.69145726e-01,
        4.54972129e-01,
        1.75106666e-01,
        2.03826227e+00,
        2.46728348e-01,
        -4.22949501e-01,
        1.51063923e+00,
        -1.68436257e+00,
        -6.33126909e-01,
        -3.21811645e-01,
        -7.43356823e-01,
        -8.88412948e-01,
        3.30978417e-01,
        -5.14096329e-01,
        -5.94601622e-01,
        -1.64018325e+00,
        1.68241142e+00,
        1.65096963e+00,
        -4.70678462e-01,
        -4.65759203e-02,
        -5.33226474e-01,
        8.45315150e-01,
        1.09392222e+00,
        1.57274625e+00,
        1.84790179e+00,
        -2.39479475e+00,
        -1.18979029e+00,
        -4.66516277e-01,
        7.24758459e-01,
        5.50752094e-01,
        -3.07320424e-02,
        1.15915041e+00,
        -1.53855863e+00,
        3.37315424e-01,
        -1.03930023e-01,
        9.70199553e-01,
        9.62167289e-01,
        -2.25169893e-01,
        -7.25327772e-01,
        -2.42505425e-01,
        1.14254989e+00,
        -1.53234689e+00,
        1.97433882e-01,
        2.47970912e+00,
        -1.70221436e-01,
        -4.73251892e-01,
        3.85573661e-02,
        -2.90347503e-02,
        1.71721337e+00,
        -7.83553639e-02,
        -7.17925813e-01,
        2.94606971e-01,
        6.13703879e-01,
        -1.28300279e-01,
        -1.10296539e+00,
        1.23727563e+00,
        7.74635427e-01,
        -8.08131104e-01,
        -7.61620310e-01,
        1.53413967e-01,
        -1.59083497e-01,
        3.84799250e-01,
        -8.60748571e-01,
        -2.53508138e-01,
        6.49975870e-01,
        8.99213227e-01,
        4.57098207e-01,
        1.87863091e-01,
        3.40421397e-01,
        4.82384229e-01,
        2.22609651e-01,
        1.89245599e+00,
        -7.38778218e-01,
        7.48814105e-01,
        4.63491808e-01,
        -7.62295393e-01,
        -5.28282537e-01,
        -1.63711387e-01,
        -5.64760691e-01,
        4.07867509e-01,
        -7.72105487e-01,
        5.71427751e-01,
        -1.74097074e+00,
        -1.40354541e+00,
        4.78062207e-01,
        5.50278495e-02,
        5.89123368e-01,
        4.27389977e-01,
        1.05099489e+00,
        2.08678874e+00,
        -1.11870349e+00,
        4.07568655e-01,
        -3.11473744e-01,
        -1.07097169e+00,
        5.42239467e-01,
        -1.40190341e+00,
        1.31722615e+00,
        -1.30788611e+00,
        -1.11061320e+00,
        2.40509241e-01,
        -7.02909498e-01,
        1.56449562e+00,
        -2.04206832e-01,
        8.81302274e-01,
        -1.45405563e+00,
        -4.83185192e-01,
        -2.94449526e-01,
        1.16268729e+00,
        -8.19710084e-01,
        -3.76067595e-01,
        -9.09265721e-01,
        -1.02602983e+00,
        3.43713081e-01,
        1.25042997e+00,
        4.58640737e-01,
        7.09117426e-01,
        -1.33903868e+00,
        1.50386158e-02,
        -5.87955352e-01,
        -1.38325475e+00,
        -8.30957281e-01,
        -2.03906984e-01,
        -1.49284263e+00,
        -1.81312695e+00,
        -1.72209887e+00,
        -1.10998675e+00,
        -6.20517064e-01,
        -1.74474403e+00,
        1.81113840e-01,
        4.29737935e-01,
        -1.42614380e+00,
        -1.08722603e+00,
        -1.22223097e+00,
        -1.75993770e-01,
        1.28437898e+00,
        1.58793144e+00,
        3.02283508e-01,
        -5.28940027e-01,
        7.98209183e-01,
        1.46300829e+00,
        1.31630173e+00,
        -5.65417374e-03,
        -6.16514855e-01,
        1.80807016e+00,
        3.52157040e-01,
        -8.83185812e-01,
        2.83508284e-01,
        1.22377070e+00,
        9.97097847e-01,
        -1.51178719e+00,
        3.81636318e-01,
        -4.61634557e-01,
        3.78071876e-01,
        2.00361440e-01,
        -6.62996103e-01,
        1.50093408e+00,
        2.38246611e-01,
        -8.79489666e-01,
        4.85812269e-01,
        -1.38681506e+00,
        6.67275601e-01,
        -5.28162596e-01,
        -1.18122138e+00,
        2.16668708e-01,
        6.77434203e-01,
        2.88559328e-01,
        -1.27724619e+00,
        1.64030745e-02,
        -6.24533941e-01,
        -5.79452476e-01,
        -2.38692275e+00,
        9.97999931e-01,
        8.51805617e-01,
        -2.15652177e-02,
        -6.60767033e-01,
        8.10468273e-01,
        -7.97921768e-01,
        -9.23133560e-02,
        -1.00111129e+00,
        -1.67436104e-02,
        2.89376132e-01,
        -1.78343578e+00,
        -7.46262441e-01,
        -2.97105082e-01,
        -1.30242798e+00,
        -2.03929792e+00,
        -4.50032352e-01,
        -8.87357958e-01,
        9.68987273e-01,
        -7.36151363e-01,
        -1.31995052e-01,
        -3.71393445e-01,
        -1.08790967e+00,
        1.93026659e+00,
        1.35947583e+00,
        6.67504877e-01,
        -5.34986756e-01,
        -9.67904248e-01,
        2.09401815e+00,
        -1.59884167e+00,
        -9.57466140e-01,
        -2.52437337e-01,
        1.93375682e+00,
        -5.44461431e-01,
        -1.89240804e+00,
        -1.03860242e+00,
        -1.19977462e+00,
        7.27050276e-01,
        1.69754239e+00,
        3.10480336e-01,
        -2.92707550e-01,
        5.25402553e-01,
        3.38073660e-01,
        9.71491361e-02,
        1.34793377e-01,
        4.49182669e-01,
        -9.34120002e-01,
        9.29535368e-03,
        -7.26125201e-02,
        -1.63434728e+00,
        1.94171145e-01,
        -8.84869633e-01,
        7.51390638e-01,
        5.23811574e-01,
        -6.70297012e-01,
        -1.24313476e+00,
        -1.63264968e-01,
        -1.22694058e+00,
        1.69707955e-01,
        -2.92314120e-01,
        -6.99012421e-01,
        -2.93884321e-01,
        1.11287812e+00,
        -5.69884123e-01,
        -1.20420829e+00,
        -3.81706194e-01,
        1.94020846e-01,
        -8.37210572e-02,
        1.01787719e+00,
        -9.69147318e-01,
        -5.67827526e-01,
        1.00571339e-01,
        -7.89593603e-01,
        -2.41948710e+00,
        7.25992042e-01,
        6.71228702e-01,
        -1.87557554e+00,
        -1.07734433e+00,
        2.30948602e+00,
        5.68455914e-02,
        -6.74300426e-01,
        1.31015812e+00,
        2.83215052e-01,
        -3.18178994e-01,
        -5.13500964e-01,
        8.88642256e-02,
        -8.96191989e-01,
        -9.61126667e-01,
        7.95069825e-02,
        1.01591578e+00,
        -5.61279917e-01,
        1.12201742e+00,
        -2.41094981e+00,
        -3.22864325e-01,
        1.21067667e+00,
        -8.95994771e-01,
        -2.89511456e-01,
        1.44000815e+00,
        1.64770389e-01,
        -5.87480871e-01,
        7.11961557e-01,
        7.76164991e-01,
        7.86027543e-01,
        -3.08583424e-01,
        3.70392303e-01,
        -2.36158155e+00,
        4.11824956e-01,
        2.93696897e-01,
        2.83586744e-02,
        -2.31992477e-01,
        -5.26806781e-01,
        -4.85208570e-02,
        -6.00531248e-01,
        -2.16222637e-01,
        1.26407124e+00,
        5.91550077e-01,
        -5.05303767e-02,
        5.04034039e-01,
        2.75137785e+00,
        -6.45903320e-01,
        1.95422083e-01,
        -8.94622661e-01,
        -5.24140704e-01,
        -3.36239634e-01,
        8.27000119e-01,
        7.74001993e-01,
        -1.90031068e+00,
        -9.43443922e-02,
        -1.62190275e+00,
        -1.28234544e+00,
        -1.47668264e+00,
        -2.44078419e+00,
        8.48179686e-01,
        -1.96471470e+00,
        4.73952042e-01,
        1.37028462e+00,
        1.39098377e+00,
        4.22216495e-01,
        2.97764875e-01,
        -1.67818547e-01,
        6.00172037e-01,
        5.03096121e-01,
        2.20208539e+00,
        -1.06215837e-03,
        2.77047811e-02,
        5.52796455e-01,
        1.24950096e-01,
        1.19913064e+00,
        -5.32354829e-01,
        1.06367909e-01,
        4.91033104e-03,
        -1.91166753e+00,
        5.24597924e-01,
        1.43782961e+00,
        -6.10924257e-01,
        1.52306582e+00,
        4.47101441e-01,
        -4.23833394e-01,
        -1.23350619e+00,
        1.76945178e-01,
        8.46584841e-01,
        -1.44077223e+00,
        9.37975581e-01,
        4.87421452e-01,
        4.62462773e-01,
        1.53461427e+00,
        4.39511801e-01,
        1.75486836e-01,
        2.18717333e+00,
        6.29978334e-01,
        -1.62979459e+00,
        2.24533956e+00,
        -2.39504362e-01,
        -2.26853262e+00,
        -1.69041931e+00,
        -1.52826999e+00,
        -3.25933216e-01,
        -1.07957383e+00,
        -2.29324355e-01,
        4.97805486e-01,
        2.26344373e-01,
        -7.87905688e-01,
        3.09049029e-01,
        -9.41964399e-03,
        -1.61339626e-01,
        -9.45469383e-01,
        4.96076958e-02,
        -1.53221464e+00,
        3.91300475e-01,
        6.87344457e-01,
        -2.85837377e-01,
        -1.33425151e+00,
        9.24237073e-01,
        -2.20921244e-02,
        -4.53019261e-01,
        2.06061132e-02,
        -6.72553983e-01,
        -3.75043195e-01,
        3.11534253e-01,
        7.27437432e-01,
        5.87583441e-02,
        -2.21024484e+00,
        2.69230118e-01,
        2.93556327e-01,
        -3.91015901e-01,
        1.18383012e+00,
        1.00863235e+00,
        -7.43452360e-01,
        -2.93150108e-02,
        -1.68728874e+00,
        -1.53213578e+00,
        -7.50838546e-01,
        1.25388346e+00,
        -1.13489168e+00,
        4.02257075e-01,
        1.57461372e+00,
        -3.93920431e-01,
        1.46873698e-02,
        -4.69998471e-01,
        -6.04656247e-01,
        2.93189860e-01,
        -1.09135846e+00,
        2.51288832e+00,
        2.61287686e-01,
        1.03104051e+00,
        1.51487455e-01,
        1.01708220e+00,
        1.12000925e-01,
        2.13557928e-01,
        -6.81171495e-01,
        -1.77820074e-01,
        -4.35319244e-01,
        1.11461277e-01,
        8.65361530e-02,
        5.57780194e-01,
        -8.28772676e-01,
        -5.62528181e-02,
        7.51452378e-01,
        -2.94734720e-01,
        1.24764501e+00,
        -1.46067736e+00,
        -1.43067966e+00,
        -8.30405602e-01,
        1.97592419e-01,
        -7.48771449e-02,
        9.29970318e-01,
    ];
    /*

    #[test]
    fn test_small_up_sample_16x() {
        let mut os = Oversample::new(OversampleFactor::SixteenTimes, 4);
        os.initialize_oversample_stages();
        let sig: &mut [f32] = &mut [1., 0., 0., 0.];

        let result: &mut [f32] = &mut [0.0; 64];
        os.process_up(sig, result);

        let expected_result: &[f32] = &[
            0.00000000e+00,
            0.00000000e+00,
            0.00000000e+00,
            0.00000000e+00,
            0.00000000e+00,
            0.00000000e+00,
            0.00000000e+00,
            0.00000000e+00,
            0.00000000e+00,
            0.00000000e+00,
            0.00000000e+00,
            0.00000000e+00,
            0.00000000e+00,
            0.00000000e+00,
            0.00000000e+00,
            0.00000000e+00,
            0.00000000e+00,
            0.00000000e+00,
            0.00000000e+00,
            0.00000000e+00,
            0.00000000e+00,
            0.00000000e+00,
            0.00000000e+00,
            0.00000000e+00,
            0.00000000e+00,
            0.00000000e+00,
            0.00000000e+00,
            0.00000000e+00,
            0.00000000e+00,
            0.00000000e+00,
            1.47097407e-28,
            0.00000000e+00,
            -1.79528298e-27,
            0.00000000e+00,
            7.79692727e-27,
            0.00000000e+00,
            -1.30250456e-26,
            0.00000000e+00,
            -8.32821524e-27,
            0.00000000e+00,
            8.24681656e-26,
            0.00000000e+00,
            -1.91917646e-25,
            0.00000000e+00,
            2.55615310e-25,
            0.00000000e+00,
            -1.38730356e-25,
            0.00000000e+00,
            -2.32264440e-25,
            0.00000000e+00,
            6.95180122e-25,
            0.00000000e+00,
            -1.01314568e-24,
            0.00000000e+00,
            1.24101812e-24,
            0.00000000e+00,
            -1.53628649e-24,
            0.00000000e+00,
            1.70225760e-24,
            0.00000000e+00,
            -1.44474565e-24,
            0.00000000e+00,
            1.65800609e-24,
            0.00000000e+00,
        ];

        assert_eq!(result.len(), expected_result.len());

        for (r, e) in result.iter().zip(expected_result.iter()) {
            assert!(
                (r - e).abs() < 1e-7,
                "Assertion failed: res: {}, expected: {}",
                r,
                e
            )
        }
    }

    #[test]
    fn down_sample_2x() {
        let mut os = Oversample::new(OversampleFactor::TwoTimes, 4);
        os.initialize_oversample_stages();
        let sig_vec = &mut vec![vec![1.], vec![0.; 7]]
            .into_iter()
            .flatten()
            .collect::<Vec<_>>();

        let result: &mut [f32] = &mut [0.0; 4];
        os.process_down(sig_vec, result);

        let expected_result: &[f32] = &[
            0.00000000e+00,
            3.02847249e-07,
            -4.27782121e-06,
            2.51688452e-05,
        ];

        for (r, e) in result.iter().zip(expected_result.iter()) {
            assert!(
                (r - e).abs() < 1e-7,
                "Assertion failed: res: {}, expected: {}",
                r,
                e
            )
        }
    }

    #[test]
    fn down_sample_4x() {
        let mut os = Oversample::new(OversampleFactor::FourTimes, 4);
        os.initialize_oversample_stages();
        let sig_vec = &mut vec![vec![1.], vec![0.; 15]]
            .into_iter()
            .flatten()
            .collect::<Vec<_>>();

        let result: &mut [f32] = &mut [0.0; 4];
        os.process_down(sig_vec, result);
        let expected_result: &[f32] =
            &[0.0000000e+00, 0.0000000e+00, -1.4802341e-13, -1.0739319e-12];

        for (r, e) in result.iter().zip(expected_result.iter()) {
            assert!(
                (r - e).abs() < 1e-7,
                "Assertion failed: res: {}, expected: {}",
                r,
                e
            )
        }
    }

    #[test]
    fn down_sample_8x() {
        let mut os = Oversample::new(OversampleFactor::EightTimes, 4);
        os.initialize_oversample_stages();
        let mut sig_vec = &mut vec![vec![1.], vec![0.; 31]]
            .into_iter()
            .flatten()
            .collect::<Vec<_>>();

        // let sig: &mut [f32] = sig_vec.as_slice();

        let result: &mut [f32] = &mut [0.0; 4];
        os.process_down(&mut sig_vec, result);

        let expected_result: &[f32] = &[
            0.00000000e+00,
            0.00000000e+00,
            -1.63016536e-20,
            7.48833181e-19,
        ];

        for (r, e) in result.iter().zip(expected_result.iter()) {
            assert!(
                (r - e).abs() < 1e-7,
                "Assertion failed: res: {}, expected: {}",
                r,
                e
            )
        }
    }

    #[test]
    fn down_sample_16x() {
        let mut os = Oversample::new(OversampleFactor::SixteenTimes, 4);
        os.initialize_oversample_stages();
        let sig_vec = &mut vec![vec![1.], vec![0.; 63]]
            .into_iter()
            .flatten()
            .collect::<Vec<f32>>();

        let result: &mut [f32] = &mut [0.0; 4];
        os.process_down(sig_vec, result);

        let expected_result: &[f32] = &[
            0.00000000e+00,
            0.00000000e+00,
            -1.79528298e-27,
            -2.32264440e-25,
        ];
        for (r, e) in result.iter().zip(expected_result.iter()) {
            assert!(
                (r - e).abs() < 1e-7,
                "Assertion failed: res: {}, expected: {}",
                r,
                e
            )
        }
    }
    */
}
