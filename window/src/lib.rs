pub fn sinc(size: usize, cutoff: f32) -> Vec<f32> {
    (((size as i32 * -1) / 2)..=(size as i32 / 2))
        .map(|i| {
            if i == 0 {
                1.0
            } else {
                let pi_i_cutoff = std::f32::consts::PI * (i as f32 * cutoff);
                pi_i_cutoff.sin() / pi_i_cutoff
            }
        })
        .collect::<Vec<f32>>()
}

pub fn hann(size: usize) -> Vec<f32> {
    (0..size)
        .map(|n| {
            ((std::f32::consts::PI * n as f32) / (size - 1) as f32)
                .sin()
                .powf(2.)
        })
        .collect::<Vec<f32>>()
}

pub fn kaiser(size: usize, beta: f32) -> Vec<f32> {
    let one_over_denom = 1. / zeroth_order_bessel(beta);
    let n_size: u32 = size as u32 - 1;
    let n_recip: f32 = 1. / n_size as f32;

    (0..size)
        .map(|n| {
            let k = (2. * (n as f32) * n_recip) - 1.;
            let arg = (1. - (k * k)).sqrt();
            zeroth_order_bessel(beta * arg) * one_over_denom
        })
        .collect::<Vec<f32>>()
}

fn zeroth_order_bessel(val: f32) -> f32 {
    const EPS: f32 = 1e-6;
    let mut bessel_value: f32 = 0.0;
    let mut term: f32 = 1.;
    let mut m: f32 = 0.;

    while term > EPS * bessel_value {
        bessel_value += term;
        m += 1.;
        term *= (val * val) / (4. * m * m);
    }

    bessel_value
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_create_kaiser() {
        let res = kaiser(10, 1.);
        let expected_result = [
            0.78984831, 0.86980546, 0.93237871, 0.97536552, 0.99724655, 0.99724655, 0.97536552,
            0.93237871, 0.86980546, 0.78984831,
        ];

        res.iter()
            .zip(expected_result.iter())
            .for_each(|(a, b)| assert!((a - b).abs() < 1e-6, "a: {}, b: {}", a, b));
    }

    #[test]
    fn test_create_kaiser_large() {
        let res = kaiser(127, 10.0);
        let expected_result = [
            3.55149375e-04,
            6.94878060e-04,
            1.16810284e-03,
            1.80390663e-03,
            2.63465224e-03,
            3.69599397e-03,
            5.02684193e-03,
            6.66927541e-03,
            8.66840205e-03,
            1.10721604e-02,
            1.39310641e-02,
            1.72978865e-02,
            2.12272857e-02,
            2.57753713e-02,
            3.09992135e-02,
            3.69562983e-02,
            4.37039321e-02,
            5.12986000e-02,
            5.97952849e-02,
            6.92467516e-02,
            7.97028057e-02,
            9.12095343e-02,
            1.03808537e-01,
            1.17536160e-01,
            1.32422734e-01,
            1.48491844e-01,
            1.65759619e-01,
            1.84234070e-01,
            2.03914484e-01,
            2.24790869e-01,
            2.46843484e-01,
            2.70042447e-01,
            2.94347430e-01,
            3.19707456e-01,
            3.46060802e-01,
            3.73335007e-01,
            4.01447002e-01,
            4.30303351e-01,
            4.59800616e-01,
            4.89825836e-01,
            5.20257128e-01,
            5.50964397e-01,
            5.81810162e-01,
            6.12650478e-01,
            6.43335956e-01,
            6.73712868e-01,
            7.03624332e-01,
            7.32911553e-01,
            7.61415118e-01,
            7.88976334e-01,
            8.15438578e-01,
            8.40648661e-01,
            8.64458188e-01,
            8.86724888e-01,
            9.07313908e-01,
            9.26099058e-01,
            9.42963979e-01,
            9.57803242e-01,
            9.70523338e-01,
            9.81043570e-01,
            9.89296828e-01,
            9.95230230e-01,
            9.98805632e-01,
            1.00000000e+00,
            9.98805632e-01,
            9.95230230e-01,
            9.89296828e-01,
            9.81043570e-01,
            9.70523338e-01,
            9.57803242e-01,
            9.42963979e-01,
            9.26099058e-01,
            9.07313908e-01,
            8.86724888e-01,
            8.64458188e-01,
            8.40648661e-01,
            8.15438578e-01,
            7.88976334e-01,
            7.61415118e-01,
            7.32911553e-01,
            7.03624332e-01,
            6.73712868e-01,
            6.43335956e-01,
            6.12650478e-01,
            5.81810162e-01,
            5.50964397e-01,
            5.20257128e-01,
            4.89825836e-01,
            4.59800616e-01,
            4.30303351e-01,
            4.01447002e-01,
            3.73335007e-01,
            3.46060802e-01,
            3.19707456e-01,
            2.94347430e-01,
            2.70042447e-01,
            2.46843484e-01,
            2.24790869e-01,
            2.03914484e-01,
            1.84234070e-01,
            1.65759619e-01,
            1.48491844e-01,
            1.32422734e-01,
            1.17536160e-01,
            1.03808537e-01,
            9.12095343e-02,
            7.97028057e-02,
            6.92467516e-02,
            5.97952849e-02,
            5.12986000e-02,
            4.37039321e-02,
            3.69562983e-02,
            3.09992135e-02,
            2.57753713e-02,
            2.12272857e-02,
            1.72978865e-02,
            1.39310641e-02,
            1.10721604e-02,
            8.66840205e-03,
            6.66927541e-03,
            5.02684193e-03,
            3.69599397e-03,
            2.63465224e-03,
            1.80390663e-03,
            1.16810284e-03,
            6.94878060e-04,
            3.55149375e-04,
        ];

        expected_result.iter().zip(res.iter()).for_each(|(a, b)| {
            assert!((a - b).abs() < 1e-5);
        });
    }

    #[test]
    fn test_create_hann() {
        let res = hann(10);
        let expected_result = [
            0., 0.11697778, 0.41317591, 0.75, 0.96984631, 0.96984631, 0.75, 0.41317591, 0.11697778,
            0.,
        ];

        res.iter()
            .zip(expected_result.iter())
            .for_each(|(a, b)| assert!((a - b).abs() < 1e-6, "a: {}, b: {}", a, b));
    }

    #[test]
    fn test_create_large_hann() {
        let res = hann(127);

        let expected_result = [
            0.00000000e+00,
            6.21539391e-04,
            2.48461232e-03,
            5.58458689e-03,
            9.91375608e-03,
            1.54613569e-02,
            2.22135971e-02,
            3.01536896e-02,
            3.92618941e-02,
            4.95155660e-02,
            6.08892133e-02,
            7.33545592e-02,
            8.68806128e-02,
            1.01433746e-01,
            1.16977778e-01,
            1.33474064e-01,
            1.50881591e-01,
            1.69157081e-01,
            1.88255099e-01,
            2.08128164e-01,
            2.28726868e-01,
            2.50000000e-01,
            2.71894671e-01,
            2.94356448e-01,
            3.17329488e-01,
            3.40756675e-01,
            3.64579766e-01,
            3.88739533e-01,
            4.13175911e-01,
            4.37828148e-01,
            4.62634953e-01,
            4.87534654e-01,
            5.12465346e-01,
            5.37365047e-01,
            5.62171852e-01,
            5.86824089e-01,
            6.11260467e-01,
            6.35420234e-01,
            6.59243325e-01,
            6.82670512e-01,
            7.05643552e-01,
            7.28105329e-01,
            7.50000000e-01,
            7.71273132e-01,
            7.91871836e-01,
            8.11744901e-01,
            8.30842919e-01,
            8.49118409e-01,
            8.66525936e-01,
            8.83022222e-01,
            8.98566254e-01,
            9.13119387e-01,
            9.26645441e-01,
            9.39110787e-01,
            9.50484434e-01,
            9.60738106e-01,
            9.69846310e-01,
            9.77786403e-01,
            9.84538643e-01,
            9.90086244e-01,
            9.94415413e-01,
            9.97515388e-01,
            9.99378461e-01,
            1.00000000e+00,
            9.99378461e-01,
            9.97515388e-01,
            9.94415413e-01,
            9.90086244e-01,
            9.84538643e-01,
            9.77786403e-01,
            9.69846310e-01,
            9.60738106e-01,
            9.50484434e-01,
            9.39110787e-01,
            9.26645441e-01,
            9.13119387e-01,
            8.98566254e-01,
            8.83022222e-01,
            8.66525936e-01,
            8.49118409e-01,
            8.30842919e-01,
            8.11744901e-01,
            7.91871836e-01,
            7.71273132e-01,
            7.50000000e-01,
            7.28105329e-01,
            7.05643552e-01,
            6.82670512e-01,
            6.59243325e-01,
            6.35420234e-01,
            6.11260467e-01,
            5.86824089e-01,
            5.62171852e-01,
            5.37365047e-01,
            5.12465346e-01,
            4.87534654e-01,
            4.62634953e-01,
            4.37828148e-01,
            4.13175911e-01,
            3.88739533e-01,
            3.64579766e-01,
            3.40756675e-01,
            3.17329488e-01,
            2.94356448e-01,
            2.71894671e-01,
            2.50000000e-01,
            2.28726868e-01,
            2.08128164e-01,
            1.88255099e-01,
            1.69157081e-01,
            1.50881591e-01,
            1.33474064e-01,
            1.16977778e-01,
            1.01433746e-01,
            8.68806128e-02,
            7.33545592e-02,
            6.08892133e-02,
            4.95155660e-02,
            3.92618941e-02,
            3.01536896e-02,
            2.22135971e-02,
            1.54613569e-02,
            9.91375608e-03,
            5.58458689e-03,
            2.48461232e-03,
            6.21539391e-04,
            0.00000000e+00,
        ];

        expected_result.iter().zip(res.iter()).for_each(|(a, b)| {
            assert!((a - b).abs() < 1e-5);
        });
    }

    #[test]
    fn test_create_sinc() {
        let res = sinc(11, 0.5);
        let expected_result = [
            1.27323954e-01,
            -3.89817183e-17,
            -2.12206591e-01,
            3.89817183e-17,
            6.36619772e-01,
            1.00000000e+00,
            6.36619772e-01,
            3.89817183e-17,
            -2.12206591e-01,
            -3.89817183e-17,
            1.27323954e-01,
        ];

        assert_eq!(res.len(), 11);

        res.iter()
            .zip(expected_result.iter())
            .for_each(|(a, b)| assert!((a - b).abs() < 1e-6, "a: {}, b: {}", a, b));
    }

    #[test]
    fn test_create_large_sinc() {
        let res = sinc(127, 0.5);

        let expected_result = [
            -1.01050758e-02,
            7.54611985e-17,
            1.04363897e-02,
            -1.14372644e-16,
            -1.07901656e-02,
            -1.35881142e-20,
            1.11687679e-02,
            -3.89817183e-17,
            -1.15749050e-02,
            8.08655660e-17,
            1.20116938e-02,
            4.80078114e-17,
            -1.24827406e-02,
            -6.25283714e-18,
            1.29922403e-02,
            -3.89817183e-17,
            -1.35451015e-02,
            8.81497134e-17,
            1.41471061e-02,
            -1.41787526e-16,
            -1.48051110e-02,
            -1.48689429e-17,
            1.55273115e-02,
            -3.89817183e-17,
            -1.63235839e-02,
            9.85008703e-17,
            1.72059398e-02,
            -3.89817183e-17,
            -1.81891364e-02,
            -2.75396868e-17,
            1.92915083e-02,
            -3.89817183e-17,
            -2.05361217e-02,
            1.14372644e-16,
            2.19524059e-02,
            -3.89817183e-17,
            -2.35785101e-02,
            -4.80078114e-17,
            2.54647909e-02,
            -3.89817183e-17,
            -2.76791205e-02,
            1.41787526e-16,
            3.03152273e-02,
            -3.89817183e-17,
            -3.35063038e-02,
            3.89817183e-17,
            3.74482219e-02,
            -3.89817183e-17,
            -4.24413182e-02,
            3.89817183e-17,
            4.89707517e-02,
            -3.89817183e-17,
            -5.78745248e-02,
            3.89817183e-17,
            7.07355303e-02,
            -3.89817183e-17,
            -9.09456818e-02,
            3.89817183e-17,
            1.27323954e-01,
            -3.89817183e-17,
            -2.12206591e-01,
            3.89817183e-17,
            6.36619772e-01,
            1.00000000e+00,
            6.36619772e-01,
            3.89817183e-17,
            -2.12206591e-01,
            -3.89817183e-17,
            1.27323954e-01,
            3.89817183e-17,
            -9.09456818e-02,
            -3.89817183e-17,
            7.07355303e-02,
            3.89817183e-17,
            -5.78745248e-02,
            -3.89817183e-17,
            4.89707517e-02,
            3.89817183e-17,
            -4.24413182e-02,
            -3.89817183e-17,
            3.74482219e-02,
            3.89817183e-17,
            -3.35063038e-02,
            -3.89817183e-17,
            3.03152273e-02,
            1.41787526e-16,
            -2.76791205e-02,
            -3.89817183e-17,
            2.54647909e-02,
            -4.80078114e-17,
            -2.35785101e-02,
            -3.89817183e-17,
            2.19524059e-02,
            1.14372644e-16,
            -2.05361217e-02,
            -3.89817183e-17,
            1.92915083e-02,
            -2.75396868e-17,
            -1.81891364e-02,
            -3.89817183e-17,
            1.72059398e-02,
            9.85008703e-17,
            -1.63235839e-02,
            -3.89817183e-17,
            1.55273115e-02,
            -1.48689429e-17,
            -1.48051110e-02,
            -1.41787526e-16,
            1.41471061e-02,
            8.81497134e-17,
            -1.35451015e-02,
            -3.89817183e-17,
            1.29922403e-02,
            -6.25283714e-18,
            -1.24827406e-02,
            4.80078114e-17,
            1.20116938e-02,
            8.08655660e-17,
            -1.15749050e-02,
            -3.89817183e-17,
            1.11687679e-02,
            -1.35881142e-20,
            -1.07901656e-02,
            -1.14372644e-16,
            1.04363897e-02,
            7.54611985e-17,
            -1.01050758e-02,
        ];

        res.iter()
            .zip(expected_result.iter())
            .for_each(|(a, b)| assert!((a - b).abs() < 1e-6, "a: {}, b: {}", a, b));
    }
}
